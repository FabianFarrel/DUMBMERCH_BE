generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  profile Profile?

  carts       Cart[]
  Transaction Transactions[]
  messages    Message[]
  rooms       Room[]         @relation("RoomUsers")

  @@map("user")
}

model Room {
  id       Int       @id @default(autoincrement())
  messages Message[]

  users User[] @relation("RoomUsers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id       Int    @id @default(autoincrement())
  content  String
  senderId Int
  roomId   Int

  sender User @relation(fields: [senderId], references: [id])
  room   Room @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id       Int     @id @default(autoincrement())
  fullname String  @unique
  phone    String?
  gender   Gender?
  address  String?
  image    String?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId])
  @@map("profile")
}

model Category {
  id           Int    @id @default(autoincrement())
  categoryName String

  product Product[]

  @@map("category")
}

model Product {
  id          Int            @id @default(autoincrement())
  productName String
  productDesc String
  price       Int
  Qty         Int
  image       ImageProduct[]

  categoryId Int
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems  CartItem[]

  @@map("product")
}

model ImageProduct {
  id  Int    @id @default(autoincrement())
  url String

  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("imgproduct")
}

model Cart {
  id          Int            @id @default(autoincrement())
  userId      Int
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Transaction Transactions[]

  @@map("cart")
}

model CartItem {
  id  Int @id @default(autoincrement())
  qty Int @default(1)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, cartId])
  @@map("cart_item")
}

model Transactions {
  id        Int               @id @default(autoincrement())
  amount    Int
  status    TransactionStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

enum TransactionStatus {
  PAID
  PENDING
  FAILED
}
